Chain Of Responsibility

A chain of components who all get a chance to process a command or a query , 
optionally having default processing implementation and an ability to terminate the processing chain.

Example
You click a graphical element on a form
	Button handles it, stops further processing
	Underlying group box
	Underlying window



	https://www.geeksforgeeks.org/chain-responsibility-design-pattern/
Used to achieve loose coupling in software design where a request from the client is passed to a chain of objects to process them.

Later the object in the chain will decide themselves who will be processing the request and whether the request is required to be 
sent to the next object in the chain or not

Where and When Chain of Responsibility pattern is applicable :

When you want to decouple a request’s sender and receiver
Multiple objects, determined at runtime, are candidates to handle a request
When you don’t want to specify handlers explicitly in your code
When you want to issue a request to one of several objects without specifying the receiver explicitly.

This pattern is recommended when multiple objects can handle a request and the handler doesn’t have to be a specific object. 
Also, the handler is determined at runtime. 
Please note that a request not handled at all by any handler is a valid use case.

Handler : This can be an interface which will primarily recieve the request and dispatches the request to chain of handlers. It has reference of only first handler in the chain and does not know anything about rest of the handlers.
Concrete handlers : These are actual handlers of the request chained in some sequential order.
Client : Originator of request and this will access the handler to handle it.




Command & Query Seperation

Command = asking for an action or change (e.g. please set your attack value to 2)

Query = asking for information (e.g. please give me your attack value)


CQS = having seperate means of sending commands and queries to (e.g) direct field access

Chain of responsibility can be implemented as a chain of references or a centralized construct

You enlist objects in the chain, possibly controlling their order

Object removal fromthe chain e.g via Dispose()

